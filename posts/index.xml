<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Viraj Shah</title>
        <link>https://viraj071.github.io/posts/</link>
        <description>All Posts | Viraj Shah</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>virajshah.77@gmail.com (Viraj Shah)</managingEditor>
            <webMaster>virajshah.77@gmail.com (Viraj Shah)</webMaster><lastBuildDate>Thu, 08 Nov 2018 06:04:23 -0800</lastBuildDate><atom:link href="https://viraj071.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Consider a builder when faced with many constructor parameters</title>
    <link>https://viraj071.github.io/consider-a-builder-when-faced-with-many-constructor-parameters/</link>
    <pubDate>Thu, 08 Nov 2018 06:04:23 -0800</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/consider-a-builder-when-faced-with-many-constructor-parameters/</guid>
    <description><![CDATA[Item 2: Consider a builder when faced with many constructor parameters.
In the previous item, we discussed how static factory methods should be a preferred choice over constructors. While the above method works in most cases, in cases where there are a bunch of optional parameters it does not scale well.
The book consist of an example of a class that represents a Nutrition Facts label. This class would have a bunch of fields.]]></description>
</item><item>
    <title>Static factory methods instead of constructors</title>
    <link>https://viraj071.github.io/static-factory-methods-instead-of-constructors/</link>
    <pubDate>Mon, 22 Oct 2018 19:54:49 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/static-factory-methods-instead-of-constructors/</guid>
    <description><![CDATA[A while ago I started reading a highly recommended book for Java developers - Effective Java(2nd edition) by Joshua Bloch. This book has a wealth of knowledge about how to write effective java code and not make common mistakes that affect the performance and in some cases, correctness of your code. Over the course of next few months, I intend to write more of my learnings and summarize the items from the book.]]></description>
</item><item>
    <title>Unique Substrings in Wraparound String</title>
    <link>https://viraj071.github.io/unique-substrings-in-wraparound-string/</link>
    <pubDate>Sun, 09 Sep 2018 21:28:20 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/unique-substrings-in-wraparound-string/</guid>
    <description><![CDATA[Solving Unqiue Substrings in Wraparound String problem on Leetcode.
The overall gist of the problem is as follows: Given a string p, you need to find the total count of all the non-empty unique substrings of p, present in a infinite wraparound string of abcdefghijklmnopqrstuvwxyz, where length of p could be over 10000 characters.
The brute force solution to this problem would be to go over all the substrings of p and check if they are present in the above wraparound string.]]></description>
</item><item>
    <title>Largest Divisible Subset</title>
    <link>https://viraj071.github.io/largest-divisible-subset/</link>
    <pubDate>Sat, 16 Jun 2018 20:54:20 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/largest-divisible-subset/</guid>
    <description><![CDATA[I was solving the problem Largest Divisible Subset on Leetcode a while back.
The problem is as follows:
Given a set of distinct positive integers, we need to find the largest subset of this set such that every pair(E1, E2) of elements in that set satisfy one of the following conditions:
 E1 % E2 == 0 E2 % E1 == 0  If there are multiple such subsets, we can return any one of them.]]></description>
</item><item>
    <title>User and Kernel Level Threads</title>
    <link>https://viraj071.github.io/user-kernel-level-threads/</link>
    <pubDate>Thu, 26 Oct 2017 08:22:44 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/user-kernel-level-threads/</guid>
    <description><![CDATA[Kernel-Level Theads These threads are also known as &ldquo;OS-level threads&rdquo; or &ldquo;native threads&rdquo;. Kernel-level threads are managed by the OS. This means all thread scheduling happens in the kernel. For that to happen, the kernel maintains a thread table that keeps track of all threads in the system. These threads are created by making a system call into the OS.
Advantages:
 The scheduler can give more time to a process having a large number of threads rather than to a process having a smaller number of threads.]]></description>
</item><item>
    <title>Wiggle Subsequence</title>
    <link>https://viraj071.github.io/wiggle-subsequence/</link>
    <pubDate>Tue, 24 Oct 2017 18:57:52 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/wiggle-subsequence/</guid>
    <description><![CDATA[I was solving a problem called Wiggle Subsequence on leetcode today.
I spent sometime thinking of the solution to the problem before I realized that there was a similar named problem I had solved recently. Longest Increasing Subsequence.
One of the solutions to the problem runs in O(n2) time. That solution calculates the longest increasing subsequence of a given index i by checking the longest increasing subsequence for all indices j &lt; i for which nums[i] &gt; nums[j].]]></description>
</item><item>
    <title>First Blog</title>
    <link>https://viraj071.github.io/first-blog/</link>
    <pubDate>Mon, 23 Oct 2017 19:01:39 -0700</pubDate>
    <author>Author</author>
    <guid>https://viraj071.github.io/first-blog/</guid>
    <description><![CDATA[Hello all!
This is my first blog. Excitied to get this ball rolling.]]></description>
</item></channel>
</rss>
